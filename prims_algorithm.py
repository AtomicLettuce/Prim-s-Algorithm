'''
    Algorithm that finds a minimum spanning tree for a
    weighted undirected graph

    Authors: Xavier Vives Marcus
'''

INF = 9999999
# number of vertices in graph
N = 15
# creating graph by adjacency matrix method

# Straight line distance
'''G = [[0, 1023, 1390, 1740, 2740, 1690, 3510, 4080, 4520, 3100, 4100, 4890, 5160, 3160, 280],
     [1023, 0, 2090, 730, 1890, 1790, 4060, 4400, 4550, 2610, 2780, 4210, 4780, 4670, 1270],
     [1390, 2090, 0, 4670, 3130, 1310, 3140, 2790, 3450, 2850, 3470, 4660, 4500, 4510, 1160],
     [1740, 730, 4670, 0, 1330, 2080, 4460, 4630, 4580, 2340, 3580, 3720, 4490, 4360, 1990],
     [2740, 1890, 3130, 1330, 0, 2120, 4340, 4180, 3780, 1310, 2520, 2400, 3290, 3140, 2920],
     [1690, 1790, 1310, 2080, 2120, 0, 2390, 2610, 2850, 1730, 4680, 3540, 3550, 3500, 1640],
     [3510, 4060, 3140, 4460, 4340, 2390, 0, 1030, 2190, 3370, 3140, 4740, 3910, 4000, 3300],
     [4080, 4400, 2790, 4630, 4180, 2610, 1030, 0, 1210, 3010, 2420, 4030, 3010, 3130, 3910],
     [4520, 4550, 3450, 4580, 3780, 2850, 2190, 1210, 0, 2470, 1480, 3000, 1830, 2000, 4420],
     [3100, 2610, 2850, 2340, 1310, 1730, 3370, 3010, 2470, 0, 1250, 1820, 2170, 2060, 3160],
     [4100, 2780, 3470, 3580, 2520, 4680, 3140, 2420, 1480, 1250, 0, 1610, 1070, 1040, 4100],
     [4890, 4210, 4660, 3720, 2400, 3540, 4740, 4030, 3000, 1820, 1610, 0, 1430, 1230, 4950],
     [5160, 4780, 4500, 4490, 3290, 3550, 3910, 3010, 1830, 2170, 1070, 1430, 0, 200, 5160],
     [3160, 4670, 4510, 4360, 3140, 3500, 4000, 3130, 2000, 2060, 1040, 1230, 200, 0, 5110],
     [280, 1270, 1160, 1990, 2920, 1640, 3300, 3910, 4420, 3160, 4100, 4950, 5160, 5110, 0]]'''

# Road distance
G = [[0,1400,2610,2503,4284,2235,10681,10162,9081,6132,7773,7526,8415,8217,483],
    [1400,0,3831,1115,2895,3457,9445,8773,7692,4744,6384,6137,7026,6825,1859],
    [2610,3831,0,4943,6712,1846,6010,6696,6128,8561,5676,9955,10843,10657,2479],
    [2503,1115,4943,0,1802,4564,8199,7680,6599,3650,5291,5057,5936,5742,2962],
    [4284,2895,6712,1802,0,6343,6401,5882,4801,1853,3494,3253,4133,3939,4742],
    [2235,3457,1846,4564,6343,0,4165,4850,4282,3108,3838,9598,5106,5070,2105],
    [10681,9445,6010,8199,6401,4165,0,1183,2582,4554,3783,5935,4799,4842,11140],
    [10162,8773,6696,7680,5882,4850,1183,0,1633,4035,3054,5145,3942,4052,10620],
    [9081,7692,6128,6599,4801,4282,2582,1633,0,2954,1771,3754,2415,2660,9540],
    [6132,4744,8561,3650,1853,3108,4554,4035,2954,0,1797,2394,2803,2610,6591],
    [7773,6384,5676,5291,3494,3838,3783,3054,1771,1797,0,2163,1339,1256,8232],
    [7526,6137,9955,5057,3253,9598,5935,5145,3754,2394,2163,0,1938,1461,7985],
    [8415,7026,10843,5936,4133,5106,4799,3942,2415,2803,1339,1938,0,236,8873],
    [8217,6825,10657,5742,3939,5070,4842,4052,2660,2610,1256,1461,236,0,8675],
    [483,1859,2479,2962,4742,2105,11140,10620,9540,6591,8232,7985,8873,8675,0]]

# Has node been selected yet
visited_node = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


n_edges_visited = 0

#Node 0 as starting node
visited_node[0] = True
nodes_names= ["Caracas","Bogotá","Paramaribo","Quito","Lima","Manaus","Fortaleza","Salvador de Bahía","Rio de Janeiro","Cochabamba","Asunción","Valparaíso (Chile)","Montevideo","BuenosAires","Punta Arenas"]

# printing for edge and weight
print("Edge : Weight\n")
while (n_edges_visited < N - 1):
    minimum = INF
    a = 0
    b = 0
    for m in range(N):
        if visited_node[m]:
            for n in range(N):
                if ((not visited_node[n]) and G[m][n]):
                    # not in selected and there is an edge
                    if minimum > G[m][n]:
                        minimum = G[m][n]
                        a = m
                        b = n
    print(nodes_names[a] + " ------ " + nodes_names[b] + "  :  " + str(G[a][b]))
    visited_node[b] = True
    n_edges_visited += 1
